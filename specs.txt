Your connections are [1, 10]


Deliverables
Apr 9
	Graph implementation
	Simple Querying
	Selection/explanation of special feature algs

Apr 23
	Best friend chain feature
	progress on killer feature

May 2
	finish killer features
	


Deliverable 1
	Load a friend network from a file
	Text menu for queries:
		Does a user exist?
		Weight from user A to user B
	Identify special algs:
		BF chain: names of users on the friendliest chain between two people
		2 Killer features
			one of which should run over the entire graph


			
BF Chain -
 What's names of all users on the friendliest chain of people to get from user A to user B, or an indiciation that there is no path





Degrees of Seperation
 def degree(source):
	queue = [source]
	visited = [source]
	degrs = {source: 0}

	while queue:
		node = queue.pop(o)
		for nb in get_nbs(node):
			if nb not in visited:
				queue.push(nb)
				visited.add(nb)
				degrs[nb] = degrs[node] + 1
				print

	


Cliquer
def cliquer(target):
	gr_clone = graph 
	num = get_num_islands(gr_clone)

	while num < target:
		degrade(gr_clone)
		num = get_num_islands(gr_clone)

def get_num_islands(graph):
	unvisited = graph.get_nodes()

	while unvisited:
		node = unvisited.get(0)
		traverse_island(node, graph, unvisited)

def traverse_island(node, graph, unvisited):
	unvisited.remove(node)
	for nb in graph.get_nbs(node):
		traverse_island(nb, graph, unvisited)

def is_mutual_connection(a, b):
	return gr[a][b] > 0 and gr[b][a] > 0
	# check and make sure the relationship even exists

def degrade(graph):
	for node in graph 
		for relationship in node:
			graph[node][relationship] -= 1
			
			if graph[node][relationship] == 0:
				delete graph[node][relationship]